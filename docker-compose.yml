version: "3.8"

services:
  database:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - PGPORT=${POSTGRES_PORT}
    networks:
      - coopers-epeixoto
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10

  server:
    build:
      context: ./server
      dockerfile: ${DOCKERFILE:-Dockerfile.dev}
    volumes:
      - ./server:/server
      - /server/node_modules
    ports:
      - "4001:4001"
    networks:
      - coopers-epeixoto
    restart: "on-failure"
    depends_on:
      - database

  client-dev:
    container_name: client
    build:
      context: ./client
      target: dev
      dockerfile: Dockerfile.dev
    volumes:
      - ./client:/client
      - /client/node_modules
      - /client/.next
    ports:
      - "3000:3000"
    networks:
      - coopers-epeixoto
    restart: "on-failure"

  client-prod:
    container_name: client
    build:
      context: ./client
      target: runner
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    networks:
      - coopers-epeixoto
    restart: "on-failure"

  nginx:
    build: ./nginx
    ports:
      - 80:80
    networks:
      - coopers-epeixoto
    restart: "on-failure"
    depends_on:
      - server

  nginx-prod:
    build: ./nginx
    ports:
      - 80:80
    networks:
      - coopers-epeixoto
    volumes:
      - ./docs/build:/usr/share/nginx/html
    restart: "on-failure"
    depends_on:
      - server

networks:
  coopers-epeixoto:
    driver: bridge

volumes:
  postgres_data:
